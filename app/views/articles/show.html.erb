<h1><%= @article.title %></h1>
<p><%= @article.body %></p>

<ul>
    <li><%= link_to "edit this article", edit_article_path(@article) %> </li>
    <li><%= link_to "Destroy this article", article_path(@article), data: { 
        turbo_method: :delete,
        turbo_confirm: "Are you sure ?"
    } %> </li>
    <%# yes, need article_path to get the id to destroy and change the http method from :get to :delete %>
</ul>


<h2>Comments</h2>
<%= render @article.comments %> 
<%#This will now render the partial in app/views/comments/_comment.html.erb once for each comment that is in the @article.comments collection.
As the render method iterates over the @article.comments collection, it assigns each comment to a local variable named the same as the partial, in this case comment, which is then available in the partial for us to show.%>

<h2>Add a comment:</h2>
<%= render 'comments/form' %>
<%# The second render just defines the partial template we want to render, comments/form. Rails is smart enough to spot the forward slash in that string and realize that you want to render the _form.html.erb file in the app/views/comments directory. %>

<%# ?? The @article object is available to any partials rendered in the view because we defined it as an instance variable.%>
